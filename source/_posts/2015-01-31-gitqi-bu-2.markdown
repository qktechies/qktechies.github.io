---
layout: post
title: "git起步2"
date: 2015-01-31 11:38:40 +0800
comments: true
categories: 
---

##Git常用命令

####初始化一个git仓库

```bash
$mkdir gitDemo && cd gitDemo
$git init
Initialized empty Git repository in /Users/qkong/Documents/demo_code/gitDemo/.git/(初始化成功)

$ll -la .git

total 24
-rw-r--r--   1 qkong  staff    23B  1 31 14:48 HEAD
drwxr-xr-x   2 qkong  staff    68B  1 31 14:48 branches
-rw-r--r--   1 qkong  staff   137B  1 31 14:48 config
-rwxr-xr-x   1 qkong  staff    73B  1 31 14:48 description
drwxr-xr-x  11 qkong  staff   374B  1 31 14:48 hooks
drwxr-xr-x   3 qkong  staff   102B  1 31 14:48 info
drwxr-xr-x   4 qkong  staff   136B  1 31 14:48 objects
drwxr-xr-x   4 qkong  staff   136B  1 31 14:48 refs
```
创建了一个.git目录包含所有仓库文件(git仓库骨架),初始化后仓库中没有文件被跟踪

如果你想跟踪文件

```bash
touch demo
git add demo
git commit -m "first commit"
```


####克隆已存在的仓库
用git clone [url]来克隆一个仓库

```
git clone https://github.com/libgit2/libgit2
```
会创建一个libgit2的文件夹,在文件夹中初始化一个.git目录,然后拉取仓库中的所有数据

也可以拷贝仓库到自定义的文件夹

```bash
git clone https://github.com/libgit2/libgit2 mydirectory
```

git有很多种传输数据协议https://和git://

github上都可以

```bash
https://github.com/libgit2/libgit2

git@github.com:libgit2/libgit2.git
```

####记录仓库的变化
拷贝下一个git仓库文件,你想修改某些文件并把这些变化提交到仓库中,
每个在git工作目录中的文件的状态

- tracked(被跟踪了)
  最后一次快照中的文件,状态可能是:Unmodified没修改过,Modified修改过,Staged暂存过
- untracked(没被跟踪)
  不在最后一次快照中且不在跟踪区
  
####查看文件状态

```bash
$git status
On branch master
nothing to commit, working directory clean
```

这意味着你有一个干净的工作目录-没有被跟踪的文件和被修改的文件

编辑文件demo,创建文件demo2

```bash
$echo "demo">demo
$touch demo2
$git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   demo

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	demo2

no changes added to commit (use "git add" and/or "git commit -a")

```
git status显示demo修改过,demo2没有被跟踪,必须用git add加入


####跟踪新文件

```bash
$git add demo
$git add demo2
```

查看仓库当前状态

```bash
$git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   demo
	new file:   demo2
```

文件demo2不再是untracked,demo和demo2都被加入到暂存区

如果再次编辑demo

```bash
$echo 'change demo'>demo
$git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	modified:   demo
	new file:   demo2

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   demo
```
demo再次修改,文件变化没有被加入到跟踪区,这时demo文件即是跟踪文件也是非跟踪文件


####简介查看文件状态

```bash
$git status -s(--short)
MM demo
A  demo2
```

A:已经加入到跟踪区
M:已经修改过的文件

####忽略文件
如果项目中有想不被git跟踪的文件或文件夹,例如测试文件,包含用户名和密码的文件等等,部署到生产环境中不需要这些文件,可以再目录下创建一个.gitignore的文件
编辑.gitignore加入

*.[oa]

*~

第一行告诉git忽略所有以.o或者.a结尾的文件,
第二行告诉git忽略所有以~结尾的文件

例子:

```
[abc]匹配其中之一
? 匹配任意一个字符
[0-9] 匹配数字

#没有.a文件
*.a

#跟踪lib.a,忽略所有.a结尾文件
!lib.a

#忽略TODO文件,但不湖绿TODO的子文件夹
/TODO

#忽略build/目录下所有文件
build/

#忽略doc/note.txt,但不忽略类似doc/server/arch.txt
doc/*.txt

#忽略doc/server/arch.txt
doc/**/*.txt

```

####查看暂存和没暂存区的变化

```
#创建文件demo
$git init
$touch demo
$git add demo
$git commit -m 'create demo'

#修改文件内容
$echo 'line1'>demo
$git add demo
$git diff
diff --git a/demo b/demo
index e69de29..a29bdeb 100644
--- a/demo
+++ b/demo
@@ -0,0 +1 @@
+line1
```

git diff会分析出你还没有加入到暂存区的变化

```bash
#加入到暂存区
$git add demo

#查看暂存区的变化
$git diff --staged
diff --git a/demo b/demo
index e69de29..a29bdeb 100644
--- a/demo
+++ b/demo
@@ -0,0 +1 @@
+line1

```
git diff查看的是为加入暂存区的变化,如果在git add demo后执行git diff你将看到空输出

例如此时你还没commit,但是你重新修改文件

```bash
$echo 'line2'>>demo

#为加入暂存区的变化(+line2)
$git diff
diff --git a/demo b/demo
index a29bdeb..c0d0fb4 100644
--- a/demo
+++ b/demo
@@ -1 +1,2 @@
 line1
+line2
```

####提交你的变化
现在你使用git add [file]把你想要的变化加入到暂存区,你就可以用git commit将这些变化提交到仓库了

git commit -m [message]

```
$git add demo
$git commit -m 'add line1 and line2 to demo'
```

####移除文件

```
$git rm demo
$git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	deleted:    demo



$rm demo
$git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	deleted:    demo

no changes added to commit (use "git add" and/or "git commit -a")
```

如果使用rm,然后commit,就会提示:

```
On branch master
Changes not staged for commit:
	deleted:    demo

no changes added to commit
```
因为删除文件demo也是对文件的修改,commit之前必须git add demo再git commit这个删除的改变

而git rm自动执行了git add demo这个变化

```
#删除暂存区demo变化数据
git rm --cached demo
```

####移动文件

```bash
$git mv demo demo.bak

相等于
$mv demo demo.bak
$git rm demo.bak
$git add demo.bak
```

####查看commit的历史

```bash
$git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gmail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the verison number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gmail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test code

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gmail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
列出所有提交的变化 包括SHA-1校验和,作者的用户名,邮箱,日期和提交信息(git commit -m "message")

	-p 具体改变的内容
	-n(-1,-2) 列出的条数
	--stat 压缩具体改变内容
	等等参数
```


####修正提交

```
$git commit --amend
```

####Unstaging a staged file

```
$git reset 
```

####Unmodified a modified file

```
$git checkout -- [filename]
```

#####显示远程仓库列表

```
$git remote -v
```

####添加远程仓库

```
git remote add [shortname] [url]
$git remote add pb https://github.com/paulboone/ticgit
```

#####远程仓库拉去数据

```
$git fetch [remote-name]
从远程仓库中拉取本地没有的数据
git pul自动拉取数据并将远程的分支合并到现在的奉旨
```

####推送到远程

```
$git push [remote-name] [branch-name]
只有你拥有写权利并且同事没有人clone时,如果有人和你同时push,你的push将会中断
```

#####查看某个远程仓库具体信息

```
$git remote show [remote-name]
```

#####重命名或删除远程仓库名字

```
$git remote renmae pb paul
$git remote rm paul
```

####Tagging
查看所有tag

```
$git clone https://github.com/jessesquires/JSQMessagesViewController
$cd JSQMessagesViewController
#查看所有tag
$git tag
1.0.0
1.0.1
1.1.0
3.0.0
3.1.0
3.2.0
3.3.0
3.4.0
3.4.1
3.4.2
3.4.3
3.4.4
4.0.0
4.0.1
4.0.2
4.0.3
4.0.4
5.0.0
5.0.0-beta1
5.0.0-beta2
5.0.0-beta3
5.0.0-beta4
5.0.1
5.0.2
5.0.3
5.0.4
5.1.0
5.1.1
5.2.0
5.2.1
5.2.2
5.2.3
5.2.4
5.2.5
5.2.6
5.3.0
5.3.1
5.3.2
6.0-beta1
6.0-beta2
6.0-beta3
6.0-beta4
6.0-beta5
6.0-beta6
6.0.0
6.1.0
6.1.1
6.1.2
6.1.3
v2.0
v2.0.1
v2.0.2

#查看6开头的版本
$git tag -l '6*'
```

创建tags

git有两种tags:

- lightweight
  类似一个没有改变的branch,某个commit的pointer
- annotated
  存储在git数据库中的完整对象,包含校验和,tag名字,email,日期,tag message
  
注释版tag(annotated tags)

```
$touch version7.0.0
$git add version7.0.0
$git commit -m 'myversion7.0.0'
$git tag -a 7.0.0 -m 'myversion7.0.0'
$git tag -l '7*'
7.0.0
$git show 7.0.0
```

轻便版tag(lightweight tags)

```
$git tag 7.0.0-lw
$git tag -l '7*'
7.0.0
7.0.0-lw
$git show 7.0.0-lw
commit 2a9cbbf1d69a32ac4cf9ce57b33ca6de6ffa1ac2
Author: qktechies <996902001@qq.com>
Date:   Mon Feb 2 10:08:52 2015 +0800

    my version7.0.0

diff --git a/version7.0.0 b/version7.0.0
new file mode 100644
index 0000000..e69de29

```

#####Sharing Tags
默认git push是不会把tags传送到远程服务器的

```
#推送某个tag
$git push [tagname]

#切换到某个tag
$git checkout -b version2 v2.0.0
自动创建和切换到version2分支
```

####git别名(alias)

```
$ git config --global alias.co checkout 
$ git config --global alias.br branch$ git config --global alias.ci commit$ git config --global alias.st status  
```

