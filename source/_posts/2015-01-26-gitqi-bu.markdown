---
layout: post
title: "git起步1"
date: 2015-01-26 10:03:15 +0800
comments: true
categories: 
---

##关于版本控制

####Version control
- 记录文件随时间的变化
- 重新回退到指定版本

####本地版本控制系统
很多版本控制的方法就是把文件拷贝到另一个文件夹重命名,比如重命名为当前事件,这样就可以随意修改当前的文件夹,但是你很容易忘记版本中修改了哪些

![](/source/images/gitqi-bu1/localvcs.png)

![](/source/images/search.png)


####集中式版本控制系统
本地版本控制系统最主要的问题是难以在开发者之间合作,为了解决这个问题,集中式版本控制系统出现了(CVS Centralized Version Control System),例如Subversion

客户端成员可以从中心服务器check out文件
![](/source/images/gitqi-bu1/cvs.png)

缺点:
如果CVS服务器宕机1小时,那么一小时之内就无法合作或保存版本修改,如果CVS服务器数据库坏了,你将失去工程的所有版本信息

####分布式版本控制系统
DVCS(Distributed Version Control Systems)
客户端不仅仅check out文件的最新快照而是仓库的完整镜像,如果服务器宕机了,其他系统就可以依赖他合作

##Git基础

####快照而不是变化
git和其他VCS(Subversion..)最大的不同就是数据的思考方式

其他VCS记录文件随事件的变化
![](/source/images/gitqi-bu1/3.png)

git记录数据当前的快照,储存数据为快照溜,如果文件没有变化,git就不会重新存储文件
![](/source/images/gitqi-bu1/4.png)

####大部分的操作都是本地的
git上大部分操作只需要本地文件和资源,因为你有所有的项目历史版本在本地,例如我们需要查看历史版本时不需要联网

####时刻保持数据完整性
保存到git之前,数据都会检查和校验和,并且文件将此结果作为数据的唯一标识符,这意味着在修改了任何文件或者文件夹内容的情况下,git不可能不知道,如果文件在传输过程中丢失数据或者损坏,git都能检查到.

git校验和的机制是SHA-1 hash
40个十六进制的字符串(0-9 and a-f) 计算文件内容和目录结构的SHA-1 hash
大概是这样:
```
dae780eee1cb1f231a937e7e475c90f5d62ac594
```

linux中使用openssl sha1 FILENAME(文件名)生成文件内容的SHA-1 HASH值
只要两个文件内容相同,内容加密结果也相同

git储存文件内容hash值在数据库中而不是文件名

####文件三种状态
- Committed 数据已经储存到本地数据库中
- Modified 文件被修改过但没有提交到本地数据库中
- Staged 已暂存表示把已修改的文件放在下次提交时要保存的清单中
![](/source/images/gitqi-bu1/5.png)


- .git文件夹存储了项目的元数据和对象数据库,git最重要的部分,每次从其他远程仓库上拷贝的数据就在.git中
- working directory工作目录,项目文件的某个版本
- staging area:在Git目录下,储存这下一次commit的相关信息

git大概工作流程

1. 在工作目录下编辑文件

```
$mkdir gitDemo 
$cd gitDemo
$git init
Initialized empty Git repository in /Users/qkong/Desktop/gitDemo/.git/
echo "demo">demo
```
2. 对修改后的文件进行快照，然后保存到暂存区域 

```
git add demo
```

3. 提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。

```
git commit -m 'add demo file'
```

Git第一次设置

1. /etc/gitconfig git config --system
2. ~/.gitconfig git config --global
3. .git/config git config
